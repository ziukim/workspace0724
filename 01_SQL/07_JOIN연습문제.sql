-- 1. 70년대 생(1970~1979) 중 여자이면서 전씨인 사원의 이름과 주민번호, 부서 명, 직급 조회  
SELECT EMP_NAME, EMP_NO, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB USING(JOB_CODE)
WHERE SUBSTR(EMP_NO, 1, 2) BETWEEN 70 AND 79        
      AND SUBSTR(EMP_NO, 8,1) IN ('2', '4') 
      AND EMP_NAME LIKE '전%';

-- 2. 이름에 ‘형’이 들어가는 사원의 사원 코드, 사원 명, 직급 조회  
SELECT EMP_ID, EMP_NAME, JOB_NAME
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
WHERE EMP_NAME LIKE '%형%';

-- 3. 부서코드가 D5이거나 D6인 사원의 사원 명, 직급 명, 부서 코드, 부서 명 조회  
SELECT EMP_NAME, JOB_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
LEFT JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
WHERE DEPT_CODE IN ('D5', 'D6');

-- 4. 보너스를 받는 사원의 사원 명, 부서 명, 지역 명 조회  
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
LEFT JOIN LOCATION ON(LOCATION_ID = LOCAL_CODE)
WHERE BONUS IS NULL;

-- 5. 사원 명, 직급 명, 부서 명, 지역 명 조회  
SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
JOIN JOB USING(JOB_CODE)
LEFT JOIN LOCATION ON(LOCATION_ID = LOCAL_CODE);

-- 6. 한국이나 일본에서 근무 중인 사원의 사원 명, 부서 명, 지역 명, 국가 명 조회  
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME, NATIONAL_NAME
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
JOIN LOCATION ON(LOCATION_ID = LOCAL_CODE)
JOIN NATIONAL USING(NATIONAL_CODE)
WHERE NATIONAL_CODE IN('KO', 'JP');

-- 7. 한명의 사원과 같은 부서에서 일하는 사원의 이름 조회 (자체조인 활용)  
--    같은 부서에서 일하는 다른 사원의 이름을 조회하시오.  
--    단, 모든 사원이 자신의 부서에서 함께 일하는 다른 사원의 이름을 확인할 수 있어야 합니다.  
--    (예: 사원 A가 속한 부서에서 다른 사원 B의 이름을 조회)  
SELECT A.EMP_NAME, B.EMP_NAME
FROM EMPLOYEE A
JOIN EMPLOYEE B ON(A.DEPT_CODE = B.DEPT_CODE)
WHERE A.EMP_NAME != B.EMP_NAME;

-- 8. 보너스가 없고 직급 코드가 J4이거나 J7인 사원의 이름, 직급 명, 급여 조회 (NVL 이용)  
SELECT EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
WHERE NVL(BONUS, 0) = 0 
--WHERE BONUS IS NULL
AND JOB_CODE IN('J4', 'J7');

-- 9. 부서 명과 부서 별 급여 합계 조회  
SELECT DEPT_TITLE, SUM(SALARY)
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE;

-- 10. 부서 별 급여 합계가 전체 급여 총 합의 20%보다 많은 부서의 부서 명, 부서 별 급여 합계 조회  
SELECT DEPT_TITLE, SUM(SALARY)
FROM EMPLOYEE 
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE
HAVING SUM(SALARY) > (SELECT SUM(SALARY) * 0.2 
                        FROM EMPLOYEE);

-- 11. 나이 상 가장 막내의 사원 코드, 사원 명, 나이, 부서 명, 직급 명 조회  
SELECT EMP_ID, EMP_NAME, 
       FLOOR((SYSDATE - TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD')) / 365) AS "나이", 
       DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB USING(JOB_CODE)
WHERE '나이가 가장 어린';

--나이가 가장 어린
SELECT MIN(FLOOR((SYSDATE - TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD')) / 365))
FROM EMPLOYEE;

--결과
SELECT EMP_ID, EMP_NAME, 
       FLOOR((SYSDATE - TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD')) / 365) AS "나이", 
       DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB USING(JOB_CODE)
WHERE FLOOR((SYSDATE - TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD')) / 365) = 
       (SELECT MIN(FLOOR((SYSDATE - TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD')) / 365))
            FROM EMPLOYEE);

SELECT SYSDATE 
FROM DUAL;

SELECT (SYSDATE - TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD')) / 365
FROM EMPLOYEE;

SELECT MONTHS_BETWEEN(SYSDATE, TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD')) / 12
FROM EMPLOYEE;

SELECT FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD')) / 12) AS 만나이
FROM EMPLOYEE;

